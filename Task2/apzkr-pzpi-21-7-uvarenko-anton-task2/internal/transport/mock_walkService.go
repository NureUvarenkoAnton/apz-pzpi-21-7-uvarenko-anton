// Code generated by mockery v2.43.1. DO NOT EDIT.

package transport

import (
	core "NureUvarenkoAnton/apzkr-pzpi-21-7-uvarenko-anton/Task2/apzkr-pzpi-21-7-uvarenko-anton-task2/internal/core"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// mockWalkService is an autogenerated mock type for the walkService type
type mockWalkService struct {
	mock.Mock
}

// CreateWalk provides a mock function with given fields: ctx, walkParams
func (_m *mockWalkService) CreateWalk(ctx context.Context, walkParams core.CreateWalkParams) error {
	ret := _m.Called(ctx, walkParams)

	if len(ret) == 0 {
		panic("no return value specified for CreateWalk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.CreateWalkParams) error); ok {
		r0 = rf(ctx, walkParams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWalksByOwnerId provides a mock function with given fields: ctx, ownerID
func (_m *mockWalkService) GetWalksByOwnerId(ctx context.Context, ownerID sql.NullInt64) ([]core.Walk, error) {
	ret := _m.Called(ctx, ownerID)

	if len(ret) == 0 {
		panic("no return value specified for GetWalksByOwnerId")
	}

	var r0 []core.Walk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt64) ([]core.Walk, error)); ok {
		return rf(ctx, ownerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt64) []core.Walk); ok {
		r0 = rf(ctx, ownerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Walk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.NullInt64) error); ok {
		r1 = rf(ctx, ownerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalksByWalkerId provides a mock function with given fields: ctx, walkerID
func (_m *mockWalkService) GetWalksByWalkerId(ctx context.Context, walkerID sql.NullInt64) ([]core.Walk, error) {
	ret := _m.Called(ctx, walkerID)

	if len(ret) == 0 {
		panic("no return value specified for GetWalksByWalkerId")
	}

	var r0 []core.Walk
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt64) ([]core.Walk, error)); ok {
		return rf(ctx, walkerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt64) []core.Walk); ok {
		r0 = rf(ctx, walkerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Walk)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.NullInt64) error); ok {
		r1 = rf(ctx, walkerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWalkState provides a mock function with given fields: ctx, params
func (_m *mockWalkService) UpdateWalkState(ctx context.Context, params core.UpdateWalkStateParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWalkState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.UpdateWalkStateParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockWalkService creates a new instance of mockWalkService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockWalkService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockWalkService {
	mock := &mockWalkService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

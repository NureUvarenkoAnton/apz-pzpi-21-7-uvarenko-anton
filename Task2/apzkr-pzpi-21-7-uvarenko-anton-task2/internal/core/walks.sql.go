// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: walks.sql

package core

import (
	"context"
	"database/sql"
)

const createWalk = `-- name: CreateWalk :exec
INSERT INTO walks
  (owner_id, walker_id, pet_id, start_time, state)
VALUES
  (?, ?, ?, ?, 'pending')
`

type CreateWalkParams struct {
	OwnerID   sql.NullInt64
	WalkerID  sql.NullInt64
	PetID     sql.NullInt64
	StartTime sql.NullTime
}

func (q *Queries) CreateWalk(ctx context.Context, arg CreateWalkParams) error {
	_, err := q.db.ExecContext(ctx, createWalk,
		arg.OwnerID,
		arg.WalkerID,
		arg.PetID,
		arg.StartTime,
	)
	return err
}

const getWalksByOwnerId = `-- name: GetWalksByOwnerId :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE owner_id = ?
`

func (q *Queries) GetWalksByOwnerId(ctx context.Context, ownerID sql.NullInt64) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByOwnerId, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWalksByWalkerId = `-- name: GetWalksByWalkerId :many
SELECT id, owner_id, walker_id, pet_id, start_time, finish_time, state FROM walks
WHERE walker_id = ?
`

func (q *Queries) GetWalksByWalkerId(ctx context.Context, walkerID sql.NullInt64) ([]Walk, error) {
	rows, err := q.db.QueryContext(ctx, getWalksByWalkerId, walkerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Walk
	for rows.Next() {
		var i Walk
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.WalkerID,
			&i.PetID,
			&i.StartTime,
			&i.FinishTime,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWalkState = `-- name: UpdateWalkState :exec
UPDATE walks
SET 
  state = ?
WHERE
  id = ?
`

type UpdateWalkStateParams struct {
	State NullWalksState
	ID    int64
}

func (q *Queries) UpdateWalkState(ctx context.Context, arg UpdateWalkStateParams) error {
	_, err := q.db.ExecContext(ctx, updateWalkState, arg.State, arg.ID)
	return err
}

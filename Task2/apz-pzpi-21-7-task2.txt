1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система в цілому представляє класичну клієнт-серверну архітектуру. Сервери є незалежними один від одного. Клієнти також функціонують паралельно і незалежно один від одного. Немає жорсткої прив'язки клієнтів до серверів. У програми є 3 різних сервери: 
    1. основний сервер системи, який представляє собою приймач для запитів REST API, реалізує обробку даних та бізнес логіку, комунікує з DBMS для зв’язку з сервером бази даних;
    2. сервер бази даних приймає дані від серверу системи та зберігає їх локально, забезпечуючи безпеку даних;
    3. сервер веб додатку, який формує сторінки для відправлення їх у браузер користувача.
Отже, можна сказати, що система використовує також трирівневу архітектурну модель програмного забезпечення, забезпечуючи незалежність кожного компонента, в результаті покращуючи можливість до горизонтального масштабування, швидкодії та доступності до системи в цілому.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Було розроблено діаграму системи у вигляді UML діаграми розгортання. Ця діаграма допомагає відслідкувати взаємодію в системі фізичних компонентів (вузли) та які програмні компоненти (артефакти) необхідно запускати на кожному з вузлів.
Система складається з 6 вузлів: сервер системи, сервер бази даних, сервер веб-додатку, комп’ютер клієнта, смартфон клієнта, розумний ошийник(IoT пристрій).
Сервер системи складається з кількох шарів, що забезпечують зв’язок клієнтів зі збереженими у базі даних значеннями та обробку бізнес логіки. Сервер бази даних забезпечує зв’язок з сервером системи за допомогою протоколу TCP/IP та отримує дані за допомогою DBMS MySql. Сервер веб додатку надсилає сторінку для веб перегляду клієнту, яка ренедериться на його комп’ютері у браузері. Також дії у браузері надсилають запити на сервер за допомогою HTTPS. Також клієнт може взаємодіяти з системою за допомогою застосунку на смартфоні, та з нього будуть надсилатися запити HTTPS на сервер системи. IoT пристрій ошийник підключений до сервера за допомогою WebSocket для отримання наказів на відкриття сховища при потребі клієнта. Кластер також підключається до свого сховища за допомогою дроту.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Архітектура серверної частини програмної системи представляє з себе чисту архітектуру написану на Golang з використанням gin пакета для раутінгу. Чиста архітектура імплементує 3-рівневу архітектуру: обробники, сервіси та рівень репозиторію, який використовую MySql драйвер. Сама система складається з 6 основних частин:
маршрути (routers): використовуються для спрямування отриманого на сервер запиту у відповідний контролер. Також використовують, необхідне для продовження у обробниках, проміжне програмне забезпечення;
обробники (handlers): використовуються для обробки та валідації отриманого на сервер запиту. Також у цій програмній системі взаємодіють з моделями, для внесення змін в базу даних, та використовують сервіси для складнішої бізнес логіки. На вхід приймають параметри, рядок запиту чи тіло запиту;
проміжне програмне забезпечення (middlewares): використовуються у проекті для перевірки на те, чи є користувач авторизованим, та чи надсилає він запит на відповідну до своєї ролі проміжну точку. Також використовуються для розшифровування імені користувача з JWT токену та передачі його далі, у контролер;
сервіси (services): використовується для проведення складніших розрахунків, або винесення з контролерів функціоналу, який повторюється. В системі наявні сервіси для рахування відстані за координатами, за допомогою формули гаверсинуса. Також в сервісах є рахування різниці між датами у годинах та приведення об’ємів до різних одиниць виміру.
допоміжні пакети (pkg): використовуються для збереження функцій, які декілька разів можна використати в системі.
репозиторій (repository): використовується для взаємодії з базою даних. За це все відповідає звичайний Mysql драйвер разом з базою даних Mongodb. До моделей можна звернутися у будь якій частині системи, що спрощує їх використання.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Програмна система для здачі в оренду сховищ має 3 ролі користувачів: Користувач (User), Обслуговуючий персонал (Staff) та Адміністратор системи (Administrator).
Взаємодію користувачів з системою представлено на діаграмі прецедентів (рис 4.1). За діаграмою було визначено необхідну функціональність системи та взаємодію ролей з нею.
Система має таку функціональність для користувачів:
Власник домашньої тварини. Може проводити реєстрацію та логін, додавати домашніх тварин, авторизувати ошийник домашньої тварини,  переглядати вигульників,  створювати запит на вигул, оцінювання вигульника.
Вигульник. Може проводити реєстрацію та логін, переглядати запити на вигул, та історію вигулів, змінювати стан запиту, оцінювати власника.
Адмін. Може робити все те, що робить власник домашньої тварини, а також переглядати всіх користувачів та блокувати їх.

5 ПОБУДОВА ER-ДІАГРАМИ

Проектування бази даних було проведено за допомогою створення ER-моделі даних (рис 5.1). Діаграма складається з 4 основних сутностей: Користувачі (Users), Прогулянки (Walks), Рейтинги (Ratings), Тварини (Pets).Сутності мають такі зв'язки:
користувачі-тварини (один до багатьох, один користувач може мати багато тварин, але тварина може мати одного власника).
користувачі-прогулянки (один до багатьох, користувач може мати багато прогулянок, але прогулянка може мати тільки одного користувача).
прогулянки-тварини ( багато до одного, одна тварина може мати багато прогулянок, але одна прогулянка може мати тільки одну тварину).
користувачі-рейтинг (один до багатьох, один користувач може мати багато рейтингів, але рейтинг може мати тільки одного користувача).

6 СПЕЦИФІКАЦІЯ REST

Програмна система використовує REST для спілкування клієнтів з сервером. API складається з 24 кінцевих точок у 8 маршрутах (Додаток А). Кінцеві точки обробляють передачу даних між сервером та клієнтом, направляючи дані які надходять на сервер у відповідні функції. На сервері програмної системи для цього використовується звичайна маршрутизація у Golang gin зі створенням route path та передачею в них відповідних запитів. Запити з маршрутів передаються у обробники, де обробляються вхідні дані. Деякі кінцеві точки не містять жодної інформації на вхід, наприклад запит GET на “/users/self”, де відправляються дані користувача, який робить запит (користувач ідентифікується за id у jwt токені). Деякі кінцеві точки на сервері містять параметри тіла, як запит POST на “/user/login/”, який приймає 2 строки: “email” та “password”. 

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для проектування внутрішньої взаємодії компонентів системи було розроблено діаграму компонентів (рис. 7.1). Система серверу складається з таких компонентів: Репозитрія (Repository), Обробники (Handlers), Сервіси (Services), Проміжне ПЗ (Middlewares),  Маршрутизатори (Routers), Сервер API (APIServer), Pkg. Зовнішніми компонентами є База даних (Database), Клієнтський інтерфейс (Client) та Ошийник (IoT Device).

ВИСНОВКИ

У ході виконання лабораторної роботи були покращені навички з проектування серверної частини програмної системи, розробки діаграм, проектуванні бази даних. Спочатку було розроблено опис архітектури системи та серверної частини. Потім було побудовано діаграму розгортання, діаграму прецедентів, ER-діаграму та діаграму компонентів. Була розроблена програмна реалізація серверної частини програмної системи. В результаті було написано специфікацію REST для взаємодії з сервером. При розробці продукту дотримувались вимоги до чистого коду та Code Convention мови програмування Golang.

ДОДАТОК А
Специфікація REST
